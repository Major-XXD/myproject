# Recreate the missing blocklist processing script
cat > ~/pihole/process_blocklists.sh << 'EOF'
#!/data/data/com.termux/files/usr/bin/bash

PIHOLE_DIR="$HOME/pihole"
BLOCKLIST_DIR="$PIHOLE_DIR/etc/blocklists"
OUTPUT_FILE="$PIHOLE_DIR/etc/adlists.list"

echo "Processing blocklists..."

# Create output file
> "$OUTPUT_FILE"

# Create blocklist directory if it doesn't exist
mkdir -p "$BLOCKLIST_DIR"

# Download blocklists if they don't exist
if [ ! -f "$BLOCKLIST_DIR/hosts.txt" ]; then
    echo "Downloading Steven Black's hosts file..."
    wget -O "$BLOCKLIST_DIR/hosts.txt" "https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts"
fi

# Process each blocklist
for file in "$BLOCKLIST_DIR"/*.txt; do
    if [ -f "$file" ]; then
        echo "Processing $(basename "$file")..."
        
        # Extract domains and add to dnsmasq format
        grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+[[:space:]]+' "$file" | \
        grep -v '^#' | \
        grep -v 'localhost' | \
        awk '{print $2}' | \
        grep -E '^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$' | \
        sed 's/^/address=\//' | \
        sed 's/$/\/0.0.0.0/' >> "$OUTPUT_FILE"
    fi
done

echo "Blocklist processing complete. $(wc -l < "$OUTPUT_FILE") domains blocked."
EOF

chmod +x ~/pihole/process_blocklists.sh

# Fix dnsmasq configuration to avoid permission issues
cat > ~/pihole/etc/dnsmasq.conf << 'EOF'
# Pi-hole dnsmasq configuration
domain-needed
bogus-priv
no-resolv
server=8.8.8.8
server=8.8.4.4
server=1.1.1.1
# Use all interfaces available
interface=lo
# Don't bind to specific interface to avoid permission issues
# bind-interfaces
listen-address=0.0.0.0
port=5353
cache-size=10000
local-ttl=2
log-queries
log-facility=/data/data/com.termux/files/home/pihole/var/log/pihole.log
conf-file=/data/data/com.termux/files/home/pihole/etc/adlists.list
EOF

# Process blocklists now
~/pihole/process_blocklists.sh

# Try starting dnsmasq on a different port (5353) to avoid permission issues
echo "Starting dnsmasq on port 5353..."
mkdir -p ~/pihole/var/run
dnsmasq -C ~/pihole/etc/dnsmasq.conf --pid-file=~/pihole/var/run/dnsmasq.pid

# Check if dnsmasq started
sleep 2
if pgrep dnsmasq > /dev/null; then
    echo "‚úÖ Dnsmasq started successfully on port 5353"
else
    echo "‚ùå Dnsmasq still failed, trying alternative approach..."
    
    # Alternative: Use a simple hosts file approach
    cat > ~/pihole/create_hosts_block.sh << 'EOF'
#!/data/data/com.termux/files/usr/bin/bash

echo "Creating hosts-based blocking (alternative to dnsmasq)..."

# Create a simple hosts file for blocking
HOSTS_FILE="$HOME/pihole/blocked_hosts.txt"
BLOCKLIST_FILE="$HOME/pihole/etc/adlists.list"

> "$HOSTS_FILE"

if [ -f "$BLOCKLIST_FILE" ]; then
    # Convert dnsmasq format to hosts format
    sed 's/address=\///; s/\/0.0.0.0//' "$BLOCKLIST_FILE" | \
    while read domain; do
        echo "0.0.0.0 $domain" >> "$HOSTS_FILE"
    done
    
    echo "Created hosts file with $(wc -l < "$HOSTS_FILE") blocked domains"
    echo "Hosts file location: $HOSTS_FILE"
else
    echo "No blocklist found"
fi
EOF
    
    chmod +x ~/pihole/create_hosts_block.sh
    ~/pihole/create_hosts_block.sh
fi

# Update the Pi-hole admin to show correct DNS port
cat > ~/pihole/var/www/html/admin/index.php << 'EOF'
<?php
// Simple Pi-hole dashboard
$pihole_log = '/data/data/com.termux/files/home/pihole/var/log/pihole.log';
$blocklist_file = '/data/data/com.termux/files/home/pihole/etc/adlists.list';
$hosts_file = '/data/data/com.termux/files/home/pihole/blocked_hosts.txt';

function getPiholeStats() {
    global $pihole_log, $blocklist_file, $hosts_file;
    
    $stats = array(
        'blocked_domains' => 0,
        'queries_today' => 0,
        'status' => 'Unknown',
        'dns_port' => '5353',
        'blocking_method' => 'None'
    );
    
    // Check if dnsmasq is running
    $dnsmasq_pid = shell_exec('pgrep dnsmasq');
    if (trim($dnsmasq_pid)) {
        $stats['status'] = 'Active (Dnsmasq)';
        $stats['blocking_method'] = 'DNS Server on port 5353';
        
        // Count blocked domains from dnsmasq config
        if (file_exists($blocklist_file)) {
            $stats['blocked_domains'] = count(file($blocklist_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES));
        }
    } else {
        // Check if hosts file exists
        if (file_exists($hosts_file)) {
            $stats['status'] = 'Active (Hosts File)';
            $stats['blocking_method'] = 'Hosts file blocking';
            $stats['blocked_domains'] = count(file($hosts_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES));
        } else {
            $stats['status'] = 'Inactive';
            $stats['blocking_method'] = 'No blocking active';
        }
    }
    
    // Get recent log entries
    if (file_exists($pihole_log) && filesize($pihole_log) > 0) {
        $log_lines = file($pihole_log, FILE_IGNORE_NEW_LINES);
        $recent_logs = array_slice($log_lines, -10);
        $stats['recent_logs'] = $recent_logs;
        
        // Count today's queries (simplified)
        $today = date('M d');
        $stats['queries_today'] = count(array_filter($log_lines, function($line) use ($today) {
            return strpos($line, $today) !== false;
        }));
    }
    
    return $stats;
}

$stats = getPiholeStats();

// Handle actions
if (isset($_GET['action'])) {
    switch($_GET['action']) {
        case 'restart':
            if (trim(shell_exec('pgrep dnsmasq'))) {
                shell_exec('pkill dnsmasq');
                sleep(1);
                shell_exec('dnsmasq -C ~/pihole/etc/dnsmasq.conf --pid-file=~/pihole/var/run/dnsmasq.pid &');
            }
            $message = "Services restarted!";
            break;
        case 'update':
            shell_exec('~/pihole/process_blocklists.sh > /dev/null 2>&1 &');
            $message = "Blocklists update started!";
            break;
        case 'create_hosts':
            shell_exec('~/pihole/create_hosts_block.sh');
            $message = "Hosts file created for blocking!";
            break;
    }
}
?>
<!DOCTYPE html>
<html>
<head>
    <title>Pi-hole Admin - Android</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        .header {
            background: rgba(255,255,255,0.95);
            padding: 20px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 0 20px;
        }
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        .stat-card {
            background: rgba(255,255,255,0.95);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            text-align: center;
        }
        .stat-number {
            font-size: 2.5em;
            font-weight: bold;
            color: #667eea;
            margin: 10px 0;
        }
        .status-active { color: #4CAF50; }
        .status-inactive { color: #f44336; }
        .actions {
            background: rgba(255,255,255,0.95);
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
        }
        .btn {
            background: #667eea;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            text-decoration: none;
            display: inline-block;
            margin: 5px;
            cursor: pointer;
            transition: background 0.3s;
        }
        .btn:hover { background: #764ba2; }
        .message {
            background: #4CAF50;
            color: white;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
        }
        .warning {
            background: #ff9800;
            color: white;
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üõ°Ô∏è Pi-hole Admin Dashboard</h1>
        <p>Network-wide Ad Blocking on Android</p>
    </div>

    <div class="container">
        <?php if (isset($message)): ?>
            <div class="message"><?php echo $message; ?></div>
        <?php endif; ?>

        <?php if ($stats['status'] === 'Inactive'): ?>
            <div class="warning">
                <h3>‚ö†Ô∏è DNS Blocking Not Active</h3>
                <p>Dnsmasq failed to start on port 53. You can still use hosts file blocking as an alternative.</p>
            </div>
        <?php endif; ?>

        <div class="stats-grid">
            <div class="stat-card">
                <h3>üü¢ Status</h3>
                <div class="stat-number status-<?php echo strpos($stats['status'], 'Active') !== false ? 'active' : 'inactive'; ?>">
                    <?php echo $stats['status']; ?>
                </div>
                <p><?php echo $stats['blocking_method']; ?></p>
            </div>
            
            <div class="stat-card">
                <h3>üö´ Blocked</h3>
                <div class="stat-number"><?php echo number_format($stats['blocked_domains']); ?></div>
                <p>Domains on Blocklist</p>
            </div>
            
            <div class="stat-card">
                <h3>üìä Queries</h3>
                <div class="stat-number"><?php echo number_format($stats['queries_today']); ?></div>
                <p>DNS Requests Today</p>
            </div>
            
            <div class="stat-card">
                <h3>‚è∞ Time</h3>
                <div class="stat-number" style="font-size: 1.5em;"><?php echo date('H:i:s'); ?></div>
                <p><?php echo date('M d, Y'); ?></p>
            </div>
        </div>

        <div class="actions">
            <h3>üîß Quick Actions</h3>
            <a href="?action=restart" class="btn">üîÑ Restart DNS</a>
            <a href="?action=update" class="btn">üì• Update Blocklists</a>
            <a href="?action=create_hosts" class="btn">üìù Create Hosts Block</a>
            <a href="/" class="btn">üè† Main Site</a>
            <a href="logs.php" class="btn">üìã View Logs</a>
        </div>

        <div class="actions">
            <h3>‚öôÔ∏è Configuration</h3>
            <?php if (trim(shell_exec('pgrep dnsmasq'))): ?>
                <p><strong>DNS Server:</strong> 127.0.0.1:5353 (Custom Port)</p>
                <p><strong>Status:</strong> Dnsmasq running on port 5353</p>
                <p><strong>Note:</strong> Configure your device to use 127.0.0.1:5353 as DNS</p>
            <?php else: ?>
                <p><strong>DNS Blocking:</strong> Hosts file based</p>
                <p><strong>Hosts File:</strong> <?php echo $hosts_file; ?></p>
                <p><strong>Note:</strong> Manual hosts file configuration needed for blocking</p>
            <?php endif; ?>
            <p><strong>Web Interface:</strong> Port 8080</p>
            <p><strong>Platform:</strong> Android Termux</p>
        </div>
    </div>

    <script>
        // Auto-refresh every 30 seconds
        setTimeout(function() {
            window.location.reload();
        }, 30000);
    </script>
</body>
</html>
EOF

# Final status check
echo ""
echo "üîç Final Status Check:"
if pgrep nginx > /dev/null; then
    echo "‚úÖ Nginx: Running on port 8080"
else
    echo "‚ùå Nginx: Not running"
fi

if pgrep php-cgi > /dev/null; then
    echo "‚úÖ PHP-CGI: Running on port 9000"
else
    echo "‚ùå PHP-CGI: Not running" 
fi

if pgrep dnsmasq > /dev/null; then
    echo "‚úÖ Dnsmasq: Running on port 5353"
    echo "   üìù To use DNS blocking: Set device DNS to 127.0.0.1:5353"
else
    echo "‚ö†Ô∏è Dnsmasq: Not running (using hosts file alternative)"
    echo "   üìù Hosts file created for manual blocking"
fi

echo ""
echo "üéâ Pi-hole Setup Complete!"
echo ""
echo "üåê Access your Pi-hole:"
echo "   Admin Panel: http://localhost:8080/admin/"
echo "   Main Server: http://localhost:8080"
echo ""
echo "üõ°Ô∏è DNS Blocking Options:"
if pgrep dnsmasq > /dev/null; then
    echo "   Option 1: Set DNS to 127.0.0.1:5353 (Recommended)"
    echo "   Option 2: Use hosts file: ~/pihole/blocked_hosts.txt"
else
    echo "   Use hosts file for blocking: ~/pihole/blocked_hosts.txt"
    echo "   (Copy contents to /system/etc/hosts with root access)"
fi